<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/context
	   https://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

<!--	<context:annotation-config/>-->
<!--	<context:component-scan base-package="com.spring.test" />-->

	<!--开启后允许使用 Spring AOP 的@AspectJ 注解 如果是纯 xml 配置 可以不用开启这个声明-->
<!--	<aop:aspectj-autoproxy/>-->

	<!--3.启动AOP注解：false是使用默认的java代理，true是使用CGLIB代理-->
	<aop:aspectj-autoproxy proxy-target-class="false"/>

	<!-- 1.配置目标对象 -->
	<bean name="orderService" class="com.spring.test.zhl.service.impl.OrderServiceImpl"/>
	<!-- 2.声明切面 -->
	<bean name="orderAdvice" class="com.spring.test.zhl.advice.OrderAdvice"/>

	<!-- 1.配置目标对象 -->
	<bean name="accountService" class="com.spring.test.zhl.service.impl.AccountServiceImpl"/>
	<!-- 2.声明切面 -->
	<bean name="accountAdvice" class="com.spring.test.zhl.advice.AccountAdvice"/>

	<bean name="testLifeCycleService" class="com.spring.test.zhl.service.impl.TestLifeCycleServiceImpl"/>

	<!-- 3.配置将通知织入目标对象 -->
	<aop:config>
		<!--命名切入点 关于切入点更多表达式写法可以参见 README.md-->
		<aop:pointcut expression="execution(* com.spring.test.zhl.service.OrderService.*(..))" id="orderCutPoint"/>
		<aop:aspect ref="orderAdvice">
			<!-- 前置通知 -->
			<aop:before method="before" pointcut-ref="orderCutPoint"/>
			<!-- 后置通知 如果需要拿到返回值 则要指明返回值对应的参数名称-->
			<aop:after-returning method="afterReturning" pointcut-ref="orderCutPoint" returning="result"/>
			<!-- 环绕通知 -->
			<aop:around method="around" pointcut-ref="orderCutPoint"/>
			<!-- 后置异常 如果需要拿到异常 则要指明异常对应的参数名称 -->
			<aop:after-throwing method="afterException" pointcut-ref="orderCutPoint" throwing="exception"/>
			<!-- 最终通知 -->
			<aop:after method="after" pointcut-ref="orderCutPoint"/>
		</aop:aspect>
	</aop:config>

	<aop:config>
		<aop:pointcut expression="execution(* com.spring.test.zhl.service.OrderService.*(..))" id="accountCutPoint"/>
		<aop:aspect ref="accountAdvice">
			<!-- 前置通知 -->
			<aop:before method="before" pointcut-ref="accountCutPoint"/>
			<!-- 后置通知 如果需要拿到返回值 则要指明返回值对应的参数名称-->
			<aop:after-returning method="afterReturning" pointcut-ref="accountCutPoint" returning="result"/>
			<!-- 环绕通知 -->
			<aop:around method="around" pointcut-ref="orderCutPoint"/>
			<!-- 后置异常 如果需要拿到异常 则要指明异常对应的参数名称 -->
			<aop:after-throwing method="afterException" pointcut-ref="accountCutPoint" throwing="exception"/>
			<!-- 最终通知 -->
			<aop:after method="after" pointcut-ref="accountCutPoint"/>
		</aop:aspect>
	</aop:config>

</beans>